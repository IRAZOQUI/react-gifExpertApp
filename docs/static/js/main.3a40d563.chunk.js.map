{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategorias","categorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"wOAGaA,EAAc,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,cAAcC,EAAgB,EAAhBA,WAAgB,EAEnBC,mBAAS,KAFU,mBAEhDC,EAFgD,KAEpCC,EAFoC,KAkBvD,OAEI,0BAAMC,SAZU,SAACC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAQ,IAGzBT,EAAc,CAACG,GAAF,mBAAgBF,KAC7BG,EAAc,OAOd,oCACI,2BACIM,KAAK,OACLC,MAAOR,EACPS,SArBU,SAACN,GACvBF,EAAcE,EAAEO,OAAOF,aA2B/BZ,EAAYe,WAAW,CACnBd,c,OAAee,EAAUC,KAAKC,Y,2BChCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACkCC,UAAUH,GAD5C,8DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCDPO,EAAc,SAAEC,GAEzB,OADAC,QAAQC,IAAIF,GAER,yBAAKG,UAAU,kDACb,yBAAKC,IAAKJ,EAAMd,IAAKmB,IAAKL,EAAMJ,QAChC,2BAAII,EAAMJ,SCDPU,EAAW,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAa,IAAD,EAEZjB,mBAAS,CAC/BwB,KAAK,GACLgB,SAAQ,IAJ0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAW,WACN3B,EAASC,GACR2B,MAAK,SAAAC,GACFH,EAAS,CACLlB,KAAKqB,EACLL,SAAQ,SAGlB,CAACvB,IAEGwB,EDduBK,CAAc7B,GAAhCa,EAH0B,EAG/BN,KAAYgB,EAHmB,EAGnBA,QAGnB,OACI,oCACI,gCAAOvB,EAAP,KACAuB,GAAW,uBAAGJ,UAAU,WAAb,WACX,yBAAKA,UAAU,aAEHN,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACAoB,IAAOpB,EAAIC,IACND,UElBpBqB,EAAa,WAAI,MAGUhD,mBAAS,CAAC,WAHpB,mBAGnBD,EAHmB,KAGPD,EAHO,KAO1B,OACI,oCACC,8CACA,kBAAC,EAAD,CAAcA,cAAeA,EAAcC,WAAYA,IACvD,6BAHD,YAKK,4BAEGA,EAAW2B,KAAI,SAAAT,GAAQ,OAEnB,kBAAC,EAAD,CACI8B,IAAM9B,EACNA,SAAWA,U,MCfnCgC,IAASC,OAEL,kBAAC,EAAD,CAAcF,cAAY,IAE5BG,SAASC,eAAe,W","file":"static/js/main.3a40d563.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport  PropTypes  from 'prop-types';\r\n\r\nexport const AddCategory = ({setcategorias,categorias}) => {//desestrururamos para resibir los elementos de setcategoria\r\n\r\n    const [inputValue, setinputValue] = useState(' ');\r\n\r\n    const handleInputChange = (e)=>{\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit =(e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length >2){\r\n            \r\n            //console.log('Bien hecho')\r\n            setcategorias([inputValue,...categorias]);\r\n            setinputValue('');//asi limpio el valor para que no se ponga dos veces sin querer\r\n        }\r\n\r\n    }\r\n    return (\r\n        // la linea de abajo es para actualizar al dar enter \r\n        <form onSubmit={handleSubmit} > \r\n            <>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange }\r\n                />\r\n            \r\n            </>\r\n        </form>\r\n    )\r\n}\r\nAddCategory.protoTypes={\r\n    setcategorias: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\n\r\nexport const getGifs = async( category) =>{//                             encodeURI quita espacios y arregla para que el url quede bien\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=KxZKsS5ldygHFCMTbG4d65nGvCk1WaEP`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map (img => {\r\n        return {\r\n            id: img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url//recordar con el signo de ? es por si viene la info o no osea que es opcional\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\n\r\nexport const GifGridItem = ( props ) => {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeftBig \">\r\n          <img src={props.url} alt={props.title} />\r\n          <p>{props.title}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React  from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n//useEffect sirve para correr cierto codigo que queramos de forma condicional para que no se este haciendo cada que realizamos un cambio\r\nexport const GifGrid =  ({ category }) => {\r\n\r\n///         con : podemos renombrar dentro de la desestructuracion\r\n    const {data:images,loading} = useFetchGifs (category);\r\n\r\n\r\n    return(\r\n        <>\r\n            <h3> { category } </h3>\r\n           {loading && <p className=\"loading\">Loading</p>}\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map(img=>(\r\n                            <GifGridItem  \r\n                            key= { img.id }\r\n                            { ...img } />\r\n                        ))\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\n\r\n\r\n export const useFetchGifs = (category) =>{\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect( () => {\r\n         getGifs( category )\r\n         .then(imgs=>{\r\n             setstate({\r\n                 data:imgs,\r\n                 loading:false,\r\n             });\r\n         })\r\n    }, [category])\r\n\r\n    return state; //data:[] , loading:true \r\n\r\n\r\n\r\n }","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp=()=>{\r\n\r\n    //const categorias=['Bleach', 'BornTheWitch', 'Naruto'];//no usremos esta forma por si queremos agregar mas categorias\r\n    const [categorias, setcategorias] = useState(['Bleach']);\r\n    // const handleAdd = ()=>{\r\n    //     setcategorias([...categorias,'Noragami']);//usando el operador expres podemos agregar guardando los elementos que ya teniamos\r\n    // }\r\n    return(\r\n        <>\r\n         <h2> GifExpertApp </h2>\r\n         <AddCategory  setcategorias={setcategorias}categorias={categorias} />\r\n         <hr />\r\n{/*          <button onClick={handleAdd}>Agregar</button>\r\n */}         <ol>\r\n            {\r\n                categorias.map(category =>(\r\n                    //return <li key={ category }> { category }  </li>\r\n                    <GifGrid\r\n                        key={ category }\r\n                        category={ category }\r\n                    />\r\n                ))\r\n            }\r\n         </ol>\r\n        </>\r\n\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\n\nReactDOM.render(\n \n    <GifExpertApp GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}